pip install flask flask_sqlalchemy flask_restful
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///food_delivery.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

# Models

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    address = db.Column(db.String(200), nullable=False)

class Restaurant(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(200), nullable=True)

class MenuItem(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    price = db.Column(db.Float, nullable=False)
    restaurant_id = db.Column(db.Integer, db.ForeignKey('restaurant.id'), nullable=False)
    restaurant = db.relationship('Restaurant', backref=db.backref('menu_items', lazy=True))

class Order(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    restaurant_id = db.Column(db.Integer, db.ForeignKey('restaurant.id'), nullable=False)
    order_date = db.Column(db.DateTime, default=datetime.utcnow)
    status = db.Column(db.String(50), default="Pending")
    user = db.relationship('User', backref=db.backref('orders', lazy=True))
    restaurant = db.relationship('Restaurant', backref=db.backref('orders', lazy=True))

# Initialize database
@app.before_first_request
def create_tables():
    db.create_all()

# Routes

@app.route('/restaurants', methods=['GET'])
def get_restaurants():
    restaurants = Restaurant.query.all()
    return jsonify([{'id': r.id, 'name': r.name, 'description': r.description} for r in restaurants])

@app.route('/restaurant/<int:restaurant_id>/menu', methods=['GET'])
def get_menu(restaurant_id):
    items = MenuItem.query.filter_by(restaurant_id=restaurant_id).all()
    return jsonify([{'id': item.id, 'name': item.name, 'price': item.price} for item in items])

@app.route('/order', methods=['POST'])
def create_order():
    data = request.json
    new_order = Order(user_id=data['user_id'], restaurant_id=data['restaurant_id'])
    db.session.add(new_order)
    db.session.commit()
    return jsonify({'message': 'Order created successfully!'})

@app.route('/order/<int:order_id>/status', methods=['PATCH'])
def update_order_status(order_id):
    data = request.json
    order = Order.query.get(order_id)
    if order:
        order.status = data['status']
        db.session.commit()
        return jsonify({'message': 'Order status updated!'})
    return jsonify({'message': 'Order not found'}), 404

if __name__ == '__main__':
    app.run(debug=True)
FRONTEND WEB APPLICATION 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Food Delivery</title>
</head>
<body>
    <h1>Restaurants</h1>
    <div id="restaurants"></div>

    <h2>Menu</h2>
    <div id="menu"></div>

    <button onclick="createOrder()">Place Order</button>

    <script>
        async function fetchRestaurants() {
            let response = await fetch('/restaurants');
            let restaurants = await response.json();
            let output = '';
            restaurants.forEach(r => {
                output += `<p>${r.name}: ${r.description} <button onclick="fetchMenu(${r.id})">View Menu</button></p>`;
            });
            document.getElementById('restaurants').innerHTML = output;
        }

        async function fetchMenu(restaurantId) {
            let response = await fetch(`/restaurant/${restaurantId}/menu`);
            let menu = await response.json();
            let output = '';
            menu.forEach(item => {
                output += `<p>${item.name}: $${item.price}</p>`;
            });
            document.getElementById('menu').innerHTML = output;
        }

        async function createOrder() {
            const userId = 1;  // Placeholder user
            const restaurantId = 1;  // Placeholder restaurant
            let response = await fetch('/order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ user_id: userId, restaurant_id: restaurantId })
            });
            let result = await response.json();
            alert(result.message);
        }

        fetchRestaurants();
    </script>
</body>
</html>
